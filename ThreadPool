/* Thread pool is a pool of service workers pool that is provided by the Executor Services
whenever a thread is needed the TS pulls a thread from the pool and assigns it to the thread
pool and gets released whenever the work is done. The worker thread then returns to the pool
for new assignment.
*/


import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ThreadPool {
    public class myWorkerThread extends Thread{
        private String message;

        myWorkerThread(String message){
            this.message = message;
        }

        public void run(){
            System.out.println(Thread.currentThread().getName() + " " + message + 
             " Start");
             System.out.println(Thread.currentThread().getName() + 
             " End");
        }
    }

    public static void main(String[] args){
        ThreadPool tp = new ThreadPool();
        ExecutorService executor = Executors.newFixedThreadPool(5);//creating a pool of 5 threads 
        for(int i = 1; i < 10; i++){
            Thread worker = tp.new myWorkerThread(" " + i);
            executor.execute(worker);
        }
        executor.shutdown();
        while(!executor.isTerminated()){};
        System.out.println("Finished all Threads");
    }
    
}

ce_2b9429e3/bin" ThreadPool 
pool-1-thread-1  1 Start
pool-1-thread-1 End
pool-1-thread-5  5 Start
pool-1-thread-5 End
pool-1-thread-4  4 Start
pool-1-thread-4 End
pool-1-thread-3  3 Start
pool-1-thread-3 End
pool-1-thread-3  7 Start
pool-1-thread-3 End
pool-1-thread-2  2 Start
pool-1-thread-2 End
pool-1-thread-4  8 Start
pool-1-thread-4 End
pool-1-thread-1  9 Start
pool-1-thread-1 End
pool-1-thread-5  6 Start
pool-1-thread-5 End
Finished all Threads
